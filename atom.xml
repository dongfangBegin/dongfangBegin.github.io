<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>过河的小卒子</title>
  
  <subtitle>Stay Hungry Stay Foolish</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-01-05T08:42:55.945Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>过河的小卒子</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>169.最多元素</title>
    <link href="http://yoursite.com/2020/01/05/LeetCode%E4%B8%93%E9%A2%98/169.%E6%9C%80%E5%A4%9A%E5%85%83%E7%B4%A0/"/>
    <id>http://yoursite.com/2020/01/05/LeetCode%E4%B8%93%E9%A2%98/169.%E6%9C%80%E5%A4%9A%E5%85%83%E7%B4%A0/</id>
    <published>2020-01-05T08:54:53.000Z</published>
    <updated>2020-01-05T08:42:55.945Z</updated>
    
    <content type="html"><![CDATA[<p>给定一个大小为 n 的数组，找到其中的多数元素。多数元素是指在数组中出现次数大于 ⌊ n/2 ⌋ 的元素。<br>你可以假设数组是非空的，并且给定的数组总是存在多数元素。<br>示例 1:<br>输入: [3,2,3]<br>输出: 3<br>示例 2:<br>输入: [2,2,1,1,1,2,2]<br>输出: 2<br><a id="more"></a><br>方法1：使用hash_map，对每个数据的个数进行存储，然后对比计算<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">public:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    int majorityElement(vector&lt;int&gt;&amp; nums) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        int size = nums.size() / 2;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        unordered_map&lt;int, int&gt;myMap;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span> (int i = 0; i&lt;nums.size(); i++) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">            myMap[nums[i]]++;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        auto it = myMap.begin();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span> (; it != myMap.end(); it++) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span> ((*it).second &gt; size) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">                <span class="built_in">return</span> (*it).first;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        <span class="built_in">return</span> 0;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给定一个大小为 n 的数组，找到其中的多数元素。多数元素是指在数组中出现次数大于 ⌊ n/2 ⌋ 的元素。&lt;br&gt;你可以假设数组是非空的，并且给定的数组总是存在多数元素。&lt;br&gt;示例 1:&lt;br&gt;输入: [3,2,3]&lt;br&gt;输出: 3&lt;br&gt;示例 2:&lt;br&gt;输入: [2,2,1,1,1,2,2]&lt;br&gt;输出: 2&lt;br&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
    
      <category term="小题大做" scheme="http://yoursite.com/tags/%E5%B0%8F%E9%A2%98%E5%A4%A7%E5%81%9A/"/>
    
  </entry>
  
  <entry>
    <title>顺序容器共同的性质</title>
    <link href="http://yoursite.com/2020/01/05/STL/STL%E9%A1%BA%E5%BA%8F%E5%AE%B9%E5%99%A8/%E9%A1%BA%E5%BA%8F%E5%AE%B9%E5%99%A8%E5%85%B1%E6%80%A7/"/>
    <id>http://yoursite.com/2020/01/05/STL/STL%E9%A1%BA%E5%BA%8F%E5%AE%B9%E5%99%A8/%E9%A1%BA%E5%BA%8F%E5%AE%B9%E5%99%A8%E5%85%B1%E6%80%A7/</id>
    <published>2020-01-05T08:54:53.000Z</published>
    <updated>2020-01-05T09:11:09.097Z</updated>
    
    <content type="html"><![CDATA[<p>STL中的顺序容器主要有一下几种：<br>vector:可变大小的数组，支持快速随机访问，在尾部之外的地方插入元素很慢<br>string：与vector类似，不过用来存放char，随机访问速度快，在尾部插入较快<br><a id="more"></a><br>deque：双端队列，支持随机访问，在头尾访问元素很快<br>list:双向链表，支持双向访问，在list的任何位置插入元素都很快<br>forward_list：单向链表，只支持单向访问，在list的任何位置访问都很快<br>array:数组，支持随机访问，不能添加和删除元素<br>注意：除非你有更好的理由使用其他容器，否则建议使用vector<br>顺序容器中的一些共同操作：<br>1.大小<br>c.size() // 容器中元素实际个数<br>c.max_size() // 容器可以存放最大元素个数<br>c.empty() // 容器是否为空<br>2.添加/删除元素<br>c.insert(args) // 插入元素args<br>c.erase(args) // 删除元素args<br>c.clear() // 对容器清空<br>3.交换<br>swap(a, b) // 交换元素a/b<br>4.获取迭代器<br>c.begin()/c.end() // 获取正向迭代器<br>c.rbegin()/c.rend() // 获取反向迭代器</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;STL中的顺序容器主要有一下几种：&lt;br&gt;vector:可变大小的数组，支持快速随机访问，在尾部之外的地方插入元素很慢&lt;br&gt;string：与vector类似，不过用来存放char，随机访问速度快，在尾部插入较快&lt;br&gt;
    
    </summary>
    
    
      <category term="STL" scheme="http://yoursite.com/categories/STL/"/>
    
    
      <category term="STL-顺序容器" scheme="http://yoursite.com/tags/STL-%E9%A1%BA%E5%BA%8F%E5%AE%B9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>53.最大子序和</title>
    <link href="http://yoursite.com/2020/01/02/LeetCode%E4%B8%93%E9%A2%98/53.%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C/"/>
    <id>http://yoursite.com/2020/01/02/LeetCode%E4%B8%93%E9%A2%98/53.%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C/</id>
    <published>2020-01-02T15:54:53.000Z</published>
    <updated>2020-01-02T16:24:28.739Z</updated>
    
    <content type="html"><![CDATA[<p>给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。<br>示例:<br>输入: [-2,1,-3,4,-1,2,1,-5,4],<br>输出: 6<br>解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。<br><a id="more"></a><br>方法1：想到的第一个方法就是使用暴力法。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">class Solution</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">public:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    int maxSubArray(vector&lt;int&gt; &amp;nums)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        int max = INT_MIN;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        int numsSize = int(nums.size());</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span> (int i = 0; i &lt; numsSize; i++)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">            int sum = 0;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">for</span> (int j = i; j &lt; numsSize; j++)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">            &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">                sum += nums[j];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">if</span> (sum &gt; max)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">                &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">                    max = sum;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">        <span class="built_in">return</span> max;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。&lt;br&gt;示例:&lt;br&gt;输入: [-2,1,-3,4,-1,2,1,-5,4],&lt;br&gt;输出: 6&lt;br&gt;解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。&lt;br&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
    
      <category term="小题大做" scheme="http://yoursite.com/tags/%E5%B0%8F%E9%A2%98%E5%A4%A7%E5%81%9A/"/>
    
  </entry>
  
  <entry>
    <title>拷贝构造函数参数为什么使用引用格式</title>
    <link href="http://yoursite.com/2020/01/01/cpp%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/%E6%8B%B7%E8%B4%9D%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%BF%E7%94%A8%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B/"/>
    <id>http://yoursite.com/2020/01/01/cpp%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/%E6%8B%B7%E8%B4%9D%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%BF%E7%94%A8%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B/</id>
    <published>2020-01-01T03:08:38.000Z</published>
    <updated>2020-01-01T13:53:33.442Z</updated>
    
    <content type="html"><![CDATA[<p>拷贝构造函数的参数为什么使用引用的格式呢，是为了防止在拷贝的时候出现死循环<br><a id="more"></a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">class String &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="title">String</span></span>()&#123;&#125;; // 构造函数</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    String(char* m_str)&#123;&#125;; // 重载构造函数</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    String(String rhs)&#123;&#125; // 拷贝构造函数(没使用引用类型)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    String&amp; operator=(const String&amp; str)&#123;&#125; // 赋值操作符</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">private:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    char* m_str;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">int main()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    String str(<span class="string">"123"</span>); // 调用重载的构造函数</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    String str1(str); // 调用拷贝构造函数</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><br>在你使用str构造str1的时候，如果你是传值而不是传引用，在调用拷贝构造的时候你需要先复制一个str的复本，赋值给hrs，而复制这个复本rhs的时候你又需要复制rhs的复本rhs1，继续调用拷贝构造，<br>一直循环往复，所以会形成死循环。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;拷贝构造函数的参数为什么使用引用的格式呢，是为了防止在拷贝的时候出现死循环&lt;br&gt;
    
    </summary>
    
    
      <category term="C++基础知识" scheme="http://yoursite.com/categories/C-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="C++基础知识总结" scheme="http://yoursite.com/tags/C-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>什么是三法则</title>
    <link href="http://yoursite.com/2020/01/01/cpp%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/C++%E4%B8%89%E6%B3%95%E5%88%99/"/>
    <id>http://yoursite.com/2020/01/01/cpp%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/C++%E4%B8%89%E6%B3%95%E5%88%99/</id>
    <published>2020-01-01T02:36:34.000Z</published>
    <updated>2020-01-01T13:52:51.892Z</updated>
    
    <content type="html"><![CDATA[<p>对于C++的一个类，我们显式或者隐式的确定了其在拷贝，赋值，销毁做了什么，分别由拷贝构造函数，赋值运算符，析构函数控制。<br>拷贝构造函数定义了用同类型的变量初始化另一个变量的时候都做了什么<br>赋值运算符定义了将一个对象赋值给另一个对象的时候都做了什么<br>析构函数定义了在类销毁的时候都会做哪些操作<br>我们将上述三种操作称之为拷贝控制操作，由于拷贝控制操作是由三个函数控制的，所以我们称之为三法则。<br><a id="more"></a></p><h3 id="1-需要析构函数的类也需要拷贝构造和赋值操作符"><a href="#1-需要析构函数的类也需要拷贝构造和赋值操作符" class="headerlink" title="1.需要析构函数的类也需要拷贝构造和赋值操作符"></a>1.需要析构函数的类也需要拷贝构造和赋值操作符</h3><p>当我们自己定义了析构函数的时候，类中必然出现了指针类型的成员(否则不需要我们自己实现析构函数，类的默认析构函数就可以完成功能)，所以要实现析构函数释放分配给指针的内存，防止出现内存泄漏。<br>那么为什么同时又需要拷贝构造和赋值操作符呢，是为了防止出现浅拷贝的问题，所以不能使用默认的拷贝构造和赋值操作符。</p><h3 id="2-需要拷贝操作的类也需要赋值操作符，反之亦然"><a href="#2-需要拷贝操作的类也需要赋值操作符，反之亦然" class="headerlink" title="2.需要拷贝操作的类也需要赋值操作符，反之亦然"></a>2.需要拷贝操作的类也需要赋值操作符，反之亦然</h3><p>就是为了防止出现浅拷贝的问题</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于C++的一个类，我们显式或者隐式的确定了其在拷贝，赋值，销毁做了什么，分别由拷贝构造函数，赋值运算符，析构函数控制。&lt;br&gt;拷贝构造函数定义了用同类型的变量初始化另一个变量的时候都做了什么&lt;br&gt;赋值运算符定义了将一个对象赋值给另一个对象的时候都做了什么&lt;br&gt;析构函数定义了在类销毁的时候都会做哪些操作&lt;br&gt;我们将上述三种操作称之为拷贝控制操作，由于拷贝控制操作是由三个函数控制的，所以我们称之为三法则。&lt;br&gt;
    
    </summary>
    
    
      <category term="C++基础知识" scheme="http://yoursite.com/categories/C-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="C++基础知识总结" scheme="http://yoursite.com/tags/C-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>深拷贝与浅拷贝</title>
    <link href="http://yoursite.com/2020/01/01/cpp%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
    <id>http://yoursite.com/2020/01/01/cpp%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D/</id>
    <published>2020-01-01T01:58:34.000Z</published>
    <updated>2020-01-01T13:53:45.109Z</updated>
    
    <content type="html"><![CDATA[<p>C++有浅拷贝与深拷贝的概念，我们先看一下二者的具体区别：</p><h3 id="二者的区别"><a href="#二者的区别" class="headerlink" title="二者的区别"></a>二者的区别</h3><p>1.在未显式定义拷贝构造函数时，系统会使用默认拷贝构造函数-浅拷贝，该函数只能完成基本数据类型的拷贝，当数据成员中没有指针时，是可以的。<br>当数据成员中出现指针时再采用浅拷贝，会使得两个类中的两个指针指向同一块内存，当类结束时会出现对同一块内存释放2次的现象，这种是十分危险的。所以此时必须使用深拷贝。<br>2.深拷贝会在堆中另外申请空间对数据进行存储，从而解决了释放2次内存的问题，所以当类中有指针类型的数据成员，如果类对象并没有使用拷贝构造和赋值运算符就算了，如果使用了一定要使用深拷贝。<br><a id="more"></a></p><h3 id="举例说明一下"><a href="#举例说明一下" class="headerlink" title="举例说明一下"></a>举例说明一下</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">class Book &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    Book(int size) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        m_size = size;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">private:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    int m_size;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">int main()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    Book book(9);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    book1 = book; //该处调用了默认的赋值操作符，不过此处仅仅是数据成员m_size之间的拷贝，不涉及内存或者资源的拷贝操作，即浅拷贝，不会带来什么影响</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">class Book &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    Book(int size) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        m_size = size;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        m_data = new int[size]; // 动态申请内存大小</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    ~<span class="function"><span class="title">Book</span></span>() &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        delete []m_date; // 析构的时候释放内存</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">private:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    int m_size;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    int* m_data;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">int main()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    Book book(9);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    Book book1 = book; </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>该处调用了默认的赋值操作符，不过会造成未定义行为，因为该赋值操作只是一个浅拷贝的过程，即：book1.m_size = book.m_size;book1.m_data = book.m_data;这里book1和book的指针变量m_data指向了同一块内存空间，当book1析构的时候会对内存释放一次，当book析构的时候也会对内存进行释放，所以出现了对同一块内存释放2次的情况，是非常危险的。<br>所以此时就需要使用深拷贝。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">class Book &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    Book(int size) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        m_size = size;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        m_data = new int[size]; // 动态申请内存大小</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    ~<span class="function"><span class="title">Book</span></span>() &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        delete []m_date; // 析构的时候释放内存</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    Book(const Book&amp; book) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        m_size = book.m_size;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        m_data = new int[m_size]; // 申请同样大小的动态内存空间</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">private:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    int m_size;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    int* m_data;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">int main()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    Book book(9);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">    Book book1 = book; // 调用拷贝构造函数时，book1会使用book.m_size的大小重新生成m_data = new int[m_size];所以就不会出现释放两次的情况了</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;C++有浅拷贝与深拷贝的概念，我们先看一下二者的具体区别：&lt;/p&gt;
&lt;h3 id=&quot;二者的区别&quot;&gt;&lt;a href=&quot;#二者的区别&quot; class=&quot;headerlink&quot; title=&quot;二者的区别&quot;&gt;&lt;/a&gt;二者的区别&lt;/h3&gt;&lt;p&gt;1.在未显式定义拷贝构造函数时，系统会使用默认拷贝构造函数-浅拷贝，该函数只能完成基本数据类型的拷贝，当数据成员中没有指针时，是可以的。&lt;br&gt;当数据成员中出现指针时再采用浅拷贝，会使得两个类中的两个指针指向同一块内存，当类结束时会出现对同一块内存释放2次的现象，这种是十分危险的。所以此时必须使用深拷贝。&lt;br&gt;2.深拷贝会在堆中另外申请空间对数据进行存储，从而解决了释放2次内存的问题，所以当类中有指针类型的数据成员，如果类对象并没有使用拷贝构造和赋值运算符就算了，如果使用了一定要使用深拷贝。&lt;br&gt;
    
    </summary>
    
    
      <category term="C++基础知识" scheme="http://yoursite.com/categories/C-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="C++基础知识总结" scheme="http://yoursite.com/tags/C-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>编译与链接</title>
    <link href="http://yoursite.com/2020/01/01/cpp%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/%E7%BC%96%E8%AF%91%E9%93%BE%E6%8E%A5/"/>
    <id>http://yoursite.com/2020/01/01/cpp%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/%E7%BC%96%E8%AF%91%E9%93%BE%E6%8E%A5/</id>
    <published>2020-01-01T01:58:34.000Z</published>
    <updated>2020-02-23T03:28:38.901Z</updated>
    
    <content type="html"><![CDATA[<p>一段代码最终变成可执行程序，必须经过编译、链接、2个过程，其中编译主要试讲源文件(.c/.cpp)变成2进制文件，链接过程主要是生成的2进制文件与一些2进制库文件合并在一起<br>，从而生成可执行文件。<br>下面以一个’hello word’程序为例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">#define MAX_NUM 255</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">int main()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    printf(&quot;hello world&quot;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    return 0;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></p><h3 id="编译-编译过程又可以分为：预处理、编译、汇编3个过程"><a href="#编译-编译过程又可以分为：预处理、编译、汇编3个过程" class="headerlink" title="编译:编译过程又可以分为：预处理、编译、汇编3个过程"></a>编译:编译过程又可以分为：预处理、编译、汇编3个过程</h3><p>1、预处理：完成头文件的包含, 宏扩展, 条件编译, 行控制（line control）等操作。<br>.处理#include预处理指令，将include包含的头文件展开至源文件相应的地方，<br>这个过程其实是一个拷贝的过程，是将#include包含的头文件的内容原封不动的拷贝到源文件包含该头文件的地方。<br>.将所有的#define命令删除，并展开所有的宏定义，并且处理所有的条件编译指令#if/#else/#ifdef#endif等。<br>.删除所有的注释，包括// /<em> </em>/等。<br>.添加行号和文件名标识，以便编译时产生调试用的行号以及编译错误等信息。<br><code>g++ -E main.cpp -o main.i</code><br>2、编译：完成对代码的语义、语法、词法分析以及优化后生成相应的汇编代码<br>这个过程其实就是找相应符号的过程，</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一段代码最终变成可执行程序，必须经过编译、链接、2个过程，其中编译主要试讲源文件(.c/.cpp)变成2进制文件，链接过程主要是生成的2进制文件与一些2进制库文件合并在一起&lt;br&gt;，从而生成可执行文件。&lt;br&gt;下面以一个’hello word’程序为例&lt;br&gt;&lt;figure
      
    
    </summary>
    
    
      <category term="C++基础知识" scheme="http://yoursite.com/categories/C-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="C++基础知识总结" scheme="http://yoursite.com/tags/C-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>重载运算符</title>
    <link href="http://yoursite.com/2020/01/01/cpp%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/%E9%87%8D%E8%BD%BD%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <id>http://yoursite.com/2020/01/01/cpp%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/%E9%87%8D%E8%BD%BD%E8%BF%90%E7%AE%97%E7%AC%A6/</id>
    <published>2020-01-01T01:58:34.000Z</published>
    <updated>2020-02-23T02:36:53.285Z</updated>
    
    <content type="html"><![CDATA[<p>C++有重载的概念，比如函数重载以及运算符重载：</p><h3 id="函数重载与运算符重载"><a href="#函数重载与运算符重载" class="headerlink" title="函数重载与运算符重载"></a>函数重载与运算符重载</h3><p>1.在同一个作用域中，我们可以定义多个功能相似的同名函数，这些函数的形参（类别，顺序，个数等）必须不同，我们不能仅通过函数的返回值不同来区别他们。<br>2.重载的运算符其实是一个特殊的函数，这个特殊函数由opreator关键字和后面要重载的符号组成，和其他函数一样，运算符的重载也需要形参和函数返回值,如<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Box operator+(const Box &amp;val)</span></pre></td></tr></table></figure><br><a id="more"></a></p><h3 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;iostream&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">using namespace std;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">class printData</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">   public:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">      void <span class="built_in">print</span>(int i) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        cout &lt;&lt; <span class="string">"整数为: "</span> &lt;&lt; i &lt;&lt; endl;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">      void <span class="built_in">print</span>(double  f) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        cout &lt;&lt; <span class="string">"浮点数为: "</span> &lt;&lt; f &lt;&lt; endl;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">      void <span class="built_in">print</span>(char c[]) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        cout &lt;&lt; <span class="string">"字符串为: "</span> &lt;&lt; c &lt;&lt; endl;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">int main(void)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">   printData pd;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">   // 输出整数</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">   pd.print(5);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">   // 输出浮点数</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">   pd.print(500.263);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">   // 输出字符串</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">   char c[] = <span class="string">"Hello C++"</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">   pd.print(c);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">   <span class="built_in">return</span> 0;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">函数执行结果如下：</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">整数为: 5</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">浮点数为: 500.263</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">字符串为: Hello C++</span></pre></td></tr></table></figure><h3 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h3><p>上述例子中说明的重载运算符是将两个Box对象相加，返回最终的Box对象，大多数的重载运算符可以定义成普通的非成员函数也可以定义成类的成员函数，对上述例子，如果是非成员函数那么我们<br>需要进行如下定义：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Box operator+(const Box &amp;val1, const Box &amp;val2)</span></pre></td></tr></table></figure><br>如果定位成类的成员函数，我们可以借助类的this指针来完成加法操作<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;iostream&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">using namespace std;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">class Box</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">   public:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">      double getVolume(void)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">      &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">         <span class="built_in">return</span> length * breadth * height;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">      void setLength( double len )</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">      &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">          length = len;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">      void setBreadth( double bre )</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">      &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">          breadth = bre;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">      void setHeight( double hei )</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">      &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">          height = hei;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">      // 重载 + 运算符，用于把两个 Box 对象相加</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">      Box operator+(const Box&amp; b)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">      &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">         Box box;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">         box.length = this-&gt;length + b.length;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">         box.breadth = this-&gt;breadth + b.breadth;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">         box.height = this-&gt;height + b.height;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">         <span class="built_in">return</span> box;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">   private:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">      double length;      // 长度</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">      double breadth;     // 宽度</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">      double height;      // 高度</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">int main( )</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">   Box Box1;                // 声明 Box1，类型为 Box</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">   Box Box2;                // 声明 Box2，类型为 Box</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">   Box Box3;                // 声明 Box3，类型为 Box</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">   double volume = 0.0;     // 把体积存储在该变量中</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">   // Box1 详述</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">   Box1.setLength(6.0); </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line">   Box1.setBreadth(7.0); </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line">   Box1.setHeight(5.0);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line">   // Box2 详述</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">50</span></pre></td><td class="code"><pre><span class="line">   Box2.setLength(12.0); </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">51</span></pre></td><td class="code"><pre><span class="line">   Box2.setBreadth(13.0); </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">52</span></pre></td><td class="code"><pre><span class="line">   Box2.setHeight(10.0);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">53</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">54</span></pre></td><td class="code"><pre><span class="line">   // Box1 的体积</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">55</span></pre></td><td class="code"><pre><span class="line">   volume = Box1.getVolume();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">56</span></pre></td><td class="code"><pre><span class="line">   cout &lt;&lt; <span class="string">"Volume of Box1 : "</span> &lt;&lt; volume &lt;&lt;endl;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">57</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">58</span></pre></td><td class="code"><pre><span class="line">   // Box2 的体积</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">59</span></pre></td><td class="code"><pre><span class="line">   volume = Box2.getVolume();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">60</span></pre></td><td class="code"><pre><span class="line">   cout &lt;&lt; <span class="string">"Volume of Box2 : "</span> &lt;&lt; volume &lt;&lt;endl;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">61</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">62</span></pre></td><td class="code"><pre><span class="line">   // 把两个对象相加，得到 Box3</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">63</span></pre></td><td class="code"><pre><span class="line">   Box3 = Box1 + Box2; // 调用Box1对象重载的+运算符，Box2作为运算符的参数</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">64</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">65</span></pre></td><td class="code"><pre><span class="line">   // Box3 的体积</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">66</span></pre></td><td class="code"><pre><span class="line">   volume = Box3.getVolume();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">67</span></pre></td><td class="code"><pre><span class="line">   cout &lt;&lt; <span class="string">"Volume of Box3 : "</span> &lt;&lt; volume &lt;&lt;endl;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">68</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">69</span></pre></td><td class="code"><pre><span class="line">   <span class="built_in">return</span> 0;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">70</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">71</span></pre></td><td class="code"><pre><span class="line">执行结果如下：</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">72</span></pre></td><td class="code"><pre><span class="line">Volume of Box1 : 210</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">73</span></pre></td><td class="code"><pre><span class="line">Volume of Box2 : 1560</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">74</span></pre></td><td class="code"><pre><span class="line">Volume of Box3 : 5400</span></pre></td></tr></table></figure><br>我们使用最多的估计就是赋值运算符重载了，我们可以通过重载赋值运算符创建拷贝构造函数<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;iostream&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">using namespace std;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">class Distance</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">   private:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">      int feet;             // 0 到无穷</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">      int inches;           // 0 到 12</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">   public:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">      // 所需的构造函数</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">      <span class="function"><span class="title">Distance</span></span>() &#123; </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">         feet = 0;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">         inches = 0;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">      Distance(int f, int i) &#123; // 简单的重载构造函数</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">         feet = f;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">         inches = i;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">      Distance&amp; (Distance&amp; dis) &#123; // 拷贝构造函数</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">        this = dis;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">      void operator=(const Distance &amp;D ) // 重载赋值操作符</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">      &#123; </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">         feet = D.feet;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">         inches = D.inches;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">      // 显示距离的方法</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">      void displayDistance()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">      &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">         cout &lt;&lt; <span class="string">"F: "</span> &lt;&lt; feet &lt;&lt;  <span class="string">" I:"</span> &lt;&lt;  inches &lt;&lt; endl;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">      </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">int main()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">   Distance D1(11, 10), D2(5, 11);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">   cout &lt;&lt; <span class="string">"First Distance : "</span>; </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">   D1.displayDistance();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">   cout &lt;&lt; <span class="string">"Second Distance :"</span>; </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">   D2.displayDistance();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">   // 使用赋值运算符</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">   D1 = D2;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">   cout &lt;&lt; <span class="string">"First Distance :"</span>; </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">   D1.displayDistance();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line">   <span class="built_in">return</span> 0;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><br>```</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;C++有重载的概念，比如函数重载以及运算符重载：&lt;/p&gt;
&lt;h3 id=&quot;函数重载与运算符重载&quot;&gt;&lt;a href=&quot;#函数重载与运算符重载&quot; class=&quot;headerlink&quot; title=&quot;函数重载与运算符重载&quot;&gt;&lt;/a&gt;函数重载与运算符重载&lt;/h3&gt;&lt;p&gt;1.在同一个作用域中，我们可以定义多个功能相似的同名函数，这些函数的形参（类别，顺序，个数等）必须不同，我们不能仅通过函数的返回值不同来区别他们。&lt;br&gt;2.重载的运算符其实是一个特殊的函数，这个特殊函数由opreator关键字和后面要重载的符号组成，和其他函数一样，运算符的重载也需要形参和函数返回值,如&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Box operator+(const Box &amp;amp;val)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="C++基础知识" scheme="http://yoursite.com/categories/C-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="C++基础知识总结" scheme="http://yoursite.com/tags/C-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>cpp类的4种默认函数</title>
    <link href="http://yoursite.com/2019/12/29/cpp%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/cpp%E7%B1%BB%E7%9A%84%E7%89%B9%E6%AE%8A%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2019/12/29/cpp%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/cpp%E7%B1%BB%E7%9A%84%E7%89%B9%E6%AE%8A%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0/</id>
    <published>2019-12-29T01:59:15.000Z</published>
    <updated>2020-01-01T13:53:13.962Z</updated>
    
    <content type="html"><![CDATA[<p>我们定义一个空类，但是这个类的大小其实不是0，而是1，这是因为每一个类的实例在内存中都是唯一的，编译器一般都会为每个空类实例分配一个字节来表示这个类的地址。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">class Book &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><br>当我们实例化一个空类的时候，是不是真的什么都没有呢，当然不是，编译器会帮我们生成6个默认函数(重点记录一下常用的4个)<br><a id="more"></a><br>1、构造函数：当我们实例化一个空类的时候，编译器会帮我们生成一个默认构造函数，构造函数的作用其实就是对类对象分配空间，对类成员变量进行初始化。构造函数没有返回值。只要我们自己定义了一个构造函数，编译器就不会再帮忙生成默认的构造函数了。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">class Book &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">int main()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    Book book; // 生成一个默认构造函数book();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><br>构造函数可以重载，一旦我们自己定义了构造函数，编译器就不会帮我生成默认的构造函数了(不管是有参还是无参构造)<br>构造函数一般定义为公有变量，方便类直接实例化，如果想构造单例模式，可以将构造函数定义为私有的，防止类对象的直接实例化(设计模式的单例)。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">class Book &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  public:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">      <span class="function"><span class="title">Book</span></span>()&#123;&#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">      Book(char* name = <span class="string">"C++"</span>)&#123;&#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  private:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">       char* name;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">int main()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    Book book();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    Book book1(<span class="string">"Linux"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><br>2、析构函数：在类的生命周期结束时会调用类的析构函数，注意析构函数只是清理释放资源，而不是删除类对象。析构函数不能重载，只有一个，没有返回值，没有参数。<br>换句话说，如果我们有在构造函数中通过new申请内存、打开文件或者打开链接等，那么我们就有必要自己实现析构函数，然后在析构函数中对这些内存进行释放或者关闭连接。而如果在类的成员函数中我们通过new申请了内存，在函数结束时如果我们不进行delete，会造成内存泄漏，因为临时指针在函数结束时会被销毁。<br>比如说，我们在构造函数里打开文件，在析构函数里关闭打开的文件。这是一个比较好的做法。<br>在构造函数里，我们去连接数据库的连接，在析构函数里关闭数据库的连接。<br>在构造函数里动态的分配内存，那么在析构函数里把动态分配的内存回收。<br>如果我们不写析构函数，C++ 会帮我们写一个析构函数。C++帮我们写的这个析构函数只能做一些很简单的工作，它不会帮助我们去打开文件、连接数据库、分配内存这些操作，相应的回收，它也不会给我们写。所以需要我们自己手动的写。（如果要做这些操作，我们必须自己写。）<br>如果我们自己实现了析构函数，根据三法则，我们要同时在类中实现拷贝构造和重载赋值运算符。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">class Book &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  public:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">      ~<span class="function"><span class="title">Boook</span></span>()&#123;&#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  private:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">       char* name;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><br>3、拷贝构造函数：当我们实现了自己的析构函数时，我们必须要实现拷贝构造函数，注意拷贝构造不是简单的将类对象指针拷贝过来，而是将整个类对象的内容拷贝过来(这一点非常关键)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">class Book &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">public:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="title">Book</span></span>()&#123;&#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    ~<span class="function"><span class="title">Boook</span></span>()&#123;&#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    Book(const Book&amp; book);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">public:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    string name;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    int index;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">Book::Book(const Book&amp; book)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    name = book.name;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    index = book.index;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr></table></figure><br>4、赋值操作符：根据三法则，当我们实现了自己的析构函数时，我们需要实现自己的赋值操作符，在赋值的时候，不是讲指针赋值过来，而是将指针对应指向的字符串赋值过来，这是最关键的一步。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">class Book &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  public:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">     <span class="function"><span class="title">Book</span></span>()&#123;&#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">     ~<span class="function"><span class="title">Boook</span></span>()&#123;&#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">     Book(const Book&amp; book);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">     Book&amp; operator = (const Book&amp; hrs);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">public:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    string name;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    int index;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">Book&amp; Book::operator = (const Book&amp; hrs)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    name = hrs.name;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    index = hrs.index;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">return</span> *this;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><br>备注：C++三法则：如果需要析构函数，则一定需要拷贝构造函数和赋值操作符<br>如何理解这句话，首先，从“如果需要析构函数”这里我们知道，类中必然出现了指针类型的成员（否则不需要我们写析构函数，默认的析构函数就可以用了），所以，我们需要自己写析构函数来释放给指针所分配的内存来防止内存泄露，那么为什么说“一定需要拷贝构造函数和赋值操作符”呢，原因还是这样：类中出现了指针类型的成员。有指针类型的成员，我们必须防止浅拷贝问题，所以，一定需要拷贝构造函数和赋值操作符，这两个函数是防止浅拷贝问题所必须的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们定义一个空类，但是这个类的大小其实不是0，而是1，这是因为每一个类的实例在内存中都是唯一的，编译器一般都会为每个空类实例分配一个字节来表示这个类的地址。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class Book &amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;当我们实例化一个空类的时候，是不是真的什么都没有呢，当然不是，编译器会帮我们生成6个默认函数(重点记录一下常用的4个)&lt;br&gt;
    
    </summary>
    
    
      <category term="C++基础知识" scheme="http://yoursite.com/categories/C-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="C++基础知识总结" scheme="http://yoursite.com/tags/C-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>delete/default的使用</title>
    <link href="http://yoursite.com/2019/12/29/cpp%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/delete-default/"/>
    <id>http://yoursite.com/2019/12/29/cpp%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/delete-default/</id>
    <published>2019-12-29T01:48:30.000Z</published>
    <updated>2020-01-01T13:53:23.691Z</updated>
    
    <content type="html"><![CDATA[<p>1、default关键字：只能用于类的特殊成员函数中，关键字既可以在类内也可以在类外<br>在文章，cpp类的4种默认函数中，我们说明了如果我们自己定义了析构函数，根据三法则，我们需要自己实现拷贝构造函数和赋值操作符重载函数。那么对于一个变量比较多的类我们自己实现一方面容易出错，另一方面执行效率也不高，这时候怎么办呢，我们可以使用default关键字。<br><a id="more"></a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">class Book &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  public:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">     Book() = default; // 该函数比用户自己定义的默认构造函数获得更高的代码效率，<span class="string">"=default"</span>函数特性仅适用于类的特殊成员函数，且该特殊成员函数没有默认参数。</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">     Book(string name)&#123;&#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">     // Book(string name) = default; // 错误，并非类的特殊成员函数</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">     // Book(string name = <span class="string">"C++"</span>) // 错误，构造函数带有默认参数</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">     // fun1(); // 错误，default只能用于特殊成员函数</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">     ~<span class="function"><span class="title">Boook</span></span>()&#123;&#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">     Book(const Book&amp; book) = default;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">     Book&amp; operator = (const Book&amp; hrs) = default;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">public:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    string name;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    int index;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">int main()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">    Book book1(<span class="string">"linux"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    Book book2; // 调用了不带参数的构造函数，所以类中必须声明定义一个，否则会报错。</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">return</span> 0;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><br>2、delete关键字：为了能够让程序员显式的禁用某个函数，C++11 标准引入了一个新特性：”=delete”函数。程序员只需在函数声明后上“=delete;”，就可将该函数禁用。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">class Book &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  public:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">     Book();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">     Book(const Book&amp; book) = delete;  // 声明拷贝构造函数为 deleted 函数</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">     Book&amp; operator = (const Book&amp; hrs) = delete;  // 声明拷贝赋值操作符为 deleted 函数</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">public:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    string name;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    int index;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">int main()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    Book book2; // 类不必要创建析构函数，相应的拷贝构造和赋值操作符可以禁止</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">return</span> 0;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1、default关键字：只能用于类的特殊成员函数中，关键字既可以在类内也可以在类外&lt;br&gt;在文章，cpp类的4种默认函数中，我们说明了如果我们自己定义了析构函数，根据三法则，我们需要自己实现拷贝构造函数和赋值操作符重载函数。那么对于一个变量比较多的类我们自己实现一方面容易出错，另一方面执行效率也不高，这时候怎么办呢，我们可以使用default关键字。&lt;br&gt;
    
    </summary>
    
    
      <category term="C++基础知识" scheme="http://yoursite.com/categories/C-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="C++基础知识总结" scheme="http://yoursite.com/tags/C-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
</feed>
