<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>53.最大子序和</title>
    <url>/2020/01/02/LeetCode%E4%B8%93%E9%A2%98/53.%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C/</url>
    <content><![CDATA[<p>给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。<br>示例:<br>输入: [-2,1,-3,4,-1,2,1,-5,4],<br>输出: 6<br>解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。<br><a id="more"></a><br>方法1：想到的第一个方法就是使用暴力法。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">class Solution</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">public:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    int maxSubArray(vector&lt;int&gt; &amp;nums)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int max = INT_MIN;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int numsSize = int(nums.size());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> (int i = 0; i &lt; numsSize; i++)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            int sum = 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">for</span> (int j = i; j &lt; numsSize; j++)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                sum += nums[j];</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">if</span> (sum &gt; max)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    max = sum;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">return</span> max;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>小题大做</tag>
      </tags>
  </entry>
  <entry>
    <title>拷贝构造函数参数为什么使用引用格式</title>
    <url>/2020/01/01/cpp%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/%E6%8B%B7%E8%B4%9D%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%BF%E7%94%A8%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<p>拷贝构造函数的参数为什么使用引用的格式呢，是为了防止在拷贝的时候出现死循环<br><a id="more"></a><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">class String &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="title">String</span></span>()&#123;&#125;; // 构造函数</span></pre></td></tr><tr><td class="code"><pre><span class="line">    String(char* m_str)&#123;&#125;; // 重载构造函数</span></pre></td></tr><tr><td class="code"><pre><span class="line">    String(String rhs)&#123;&#125; // 拷贝构造函数(没使用引用类型)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    String&amp; operator=(const String&amp; str)&#123;&#125; // 赋值操作符</span></pre></td></tr><tr><td class="code"><pre><span class="line">private:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    char* m_str;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">int main()</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    String str(<span class="string">"123"</span>); // 调用重载的构造函数</span></pre></td></tr><tr><td class="code"><pre><span class="line">    String str1(str); // 调用拷贝构造函数</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><br>在你使用str构造str1的时候，如果你是传值而不是传引用，在调用拷贝构造的时候你需要先复制一个str的复本，赋值给hrs，而复制这个复本rhs的时候你又需要复制rhs的复本rhs1，继续调用拷贝构造，<br>一直循环往复，所以会形成死循环。</p>
]]></content>
      <categories>
        <category>C++基础知识</category>
      </categories>
      <tags>
        <tag>C++基础知识总结</tag>
      </tags>
  </entry>
  <entry>
    <title>什么是三法则</title>
    <url>/2020/01/01/cpp%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/C++%E4%B8%89%E6%B3%95%E5%88%99/</url>
    <content><![CDATA[<p>对于C++的一个类，我们显式或者隐式的确定了其在拷贝，赋值，销毁做了什么，分别由拷贝构造函数，赋值运算符，析构函数控制。<br>拷贝构造函数定义了用同类型的变量初始化另一个变量的时候都做了什么<br>赋值运算符定义了将一个对象赋值给另一个对象的时候都做了什么<br>析构函数定义了在类销毁的时候都会做哪些操作<br>我们将上述三种操作称之为拷贝控制操作，由于拷贝控制操作是由三个函数控制的，所以我们称之为三法则。<br><a id="more"></a></p>
<h3 id="1-需要析构函数的类也需要拷贝构造和赋值操作符"><a href="#1-需要析构函数的类也需要拷贝构造和赋值操作符" class="headerlink" title="1.需要析构函数的类也需要拷贝构造和赋值操作符"></a>1.需要析构函数的类也需要拷贝构造和赋值操作符</h3><p>当我们自己定义了析构函数的时候，类中必然出现了指针类型的成员(否则不需要我们自己实现析构函数，类的默认析构函数就可以完成功能)，所以要实现析构函数释放分配给指针的内存，防止出现内存泄漏。<br>那么为什么同时又需要拷贝构造和赋值操作符呢，是为了防止出现浅拷贝的问题，所以不能使用默认的拷贝构造和赋值操作符。</p>
<h3 id="2-需要拷贝操作的类也需要赋值操作符，反之亦然"><a href="#2-需要拷贝操作的类也需要赋值操作符，反之亦然" class="headerlink" title="2.需要拷贝操作的类也需要赋值操作符，反之亦然"></a>2.需要拷贝操作的类也需要赋值操作符，反之亦然</h3><p>就是为了防止出现浅拷贝的问题</p>
]]></content>
      <categories>
        <category>C++基础知识</category>
      </categories>
      <tags>
        <tag>C++基础知识总结</tag>
      </tags>
  </entry>
  <entry>
    <title>深拷贝与浅拷贝</title>
    <url>/2020/01/01/cpp%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D/</url>
    <content><![CDATA[<p>C++有浅拷贝与深拷贝的概念，我们先看一下二者的具体区别：</p>
<h3 id="二者的区别"><a href="#二者的区别" class="headerlink" title="二者的区别"></a>二者的区别</h3><p>1.在未显式定义拷贝构造函数时，系统会使用默认拷贝构造函数-浅拷贝，该函数只能完成基本数据类型的拷贝，当数据成员中没有指针时，是可以的。<br>当数据成员中出现指针时再采用浅拷贝，会使得两个类中的两个指针指向同一块内存，当类结束时会出现对同一块内存释放2次的现象，这种是十分危险的。所以此时必须使用深拷贝。<br>2.深拷贝会在堆中另外申请空间对数据进行存储，从而解决了释放2次内存的问题，所以当类中有指针类型的数据成员，如果类对象并没有使用拷贝构造和赋值运算符就算了，如果使用了一定要使用深拷贝。<br><a id="more"></a></p>
<h3 id="举例说明一下"><a href="#举例说明一下" class="headerlink" title="举例说明一下"></a>举例说明一下</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">class Book &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Book(int size) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        m_size = size;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">private:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    int m_size;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">int main()</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Book book(9);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    book1 = book; //该处调用了默认的赋值操作符，不过此处仅仅是数据成员m_size之间的拷贝，不涉及内存或者资源的拷贝操作，即浅拷贝，不会带来什么影响</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">class Book &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Book(int size) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        m_size = size;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        m_data = new int[size]; // 动态申请内存大小</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ~<span class="function"><span class="title">Book</span></span>() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        delete []m_date; // 析构的时候释放内存</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">private:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    int m_size;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    int* m_data;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">int main()</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Book book(9);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Book book1 = book; </span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<p>该处调用了默认的赋值操作符，不过会造成未定义行为，因为该赋值操作只是一个浅拷贝的过程，即：book1.m_size = book.m_size;book1.m_data = book.m_data;这里book1和book的指针变量m_data指向了同一块内存空间，当book1析构的时候会对内存释放一次，当book析构的时候也会对内存进行释放，所以出现了对同一块内存释放2次的情况，是非常危险的。<br>所以此时就需要使用深拷贝。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">class Book &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Book(int size) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        m_size = size;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        m_data = new int[size]; // 动态申请内存大小</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ~<span class="function"><span class="title">Book</span></span>() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        delete []m_date; // 析构的时候释放内存</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Book(const Book&amp; book) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        m_size = book.m_size;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        m_data = new int[m_size]; // 申请同样大小的动态内存空间</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">private:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    int m_size;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    int* m_data;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">int main()</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Book book(9);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Book book1 = book; // 调用拷贝构造函数时，book1会使用book.m_size的大小重新生成m_data = new int[m_size];所以就不会出现释放两次的情况了</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>C++基础知识</category>
      </categories>
      <tags>
        <tag>C++基础知识总结</tag>
      </tags>
  </entry>
  <entry>
    <title>cpp类的4种默认函数</title>
    <url>/2019/12/29/cpp%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/cpp%E7%B1%BB%E7%9A%84%E7%89%B9%E6%AE%8A%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<p>我们定义一个空类，但是这个类的大小其实不是0，而是1，这是因为每一个类的实例在内存中都是唯一的，编译器一般都会为每个空类实例分配一个字节来表示这个类的地址。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">class Book &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><br>当我们实例化一个空类的时候，是不是真的什么都没有呢，当然不是，编译器会帮我们生成6个默认函数(重点记录一下常用的4个)<br><a id="more"></a><br>1、构造函数：当我们实例化一个空类的时候，编译器会帮我们生成一个默认构造函数，构造函数的作用其实就是对类对象分配空间，对类成员变量进行初始化。构造函数没有返回值。只要我们自己定义了一个构造函数，编译器就不会再帮忙生成默认的构造函数了。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">class Book &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">int main()</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Book book; // 生成一个默认构造函数book();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><br>构造函数可以重载，一旦我们自己定义了构造函数，编译器就不会帮我生成默认的构造函数了(不管是有参还是无参构造)<br>构造函数一般定义为公有变量，方便类直接实例化，如果想构造单例模式，可以将构造函数定义为私有的，防止类对象的直接实例化(设计模式的单例)。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">class Book &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  public:</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="function"><span class="title">Book</span></span>()&#123;&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      Book(char* name = <span class="string">"C++"</span>)&#123;&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  private:</span></pre></td></tr><tr><td class="code"><pre><span class="line">       char* name;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">int main()</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Book book();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Book book1(<span class="string">"Linux"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><br>2、析构函数：在类的生命周期结束时会调用类的析构函数，注意析构函数只是清理释放资源，而不是删除类对象。析构函数不能重载，只有一个，没有返回值，没有参数。<br>换句话说，如果我们有在构造函数中通过new申请内存、打开文件或者打开链接等，那么我们就有必要自己实现析构函数，然后在析构函数中对这些内存进行释放或者关闭连接。而如果在类的成员函数中我们通过new申请了内存，在函数结束时如果我们不进行delete，会造成内存泄漏，因为临时指针在函数结束时会被销毁。<br>比如说，我们在构造函数里打开文件，在析构函数里关闭打开的文件。这是一个比较好的做法。<br>在构造函数里，我们去连接数据库的连接，在析构函数里关闭数据库的连接。<br>在构造函数里动态的分配内存，那么在析构函数里把动态分配的内存回收。<br>如果我们不写析构函数，C++ 会帮我们写一个析构函数。C++帮我们写的这个析构函数只能做一些很简单的工作，它不会帮助我们去打开文件、连接数据库、分配内存这些操作，相应的回收，它也不会给我们写。所以需要我们自己手动的写。（如果要做这些操作，我们必须自己写。）<br>如果我们自己实现了析构函数，根据三法则，我们要同时在类中实现拷贝构造和重载赋值运算符。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">class Book &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  public:</span></pre></td></tr><tr><td class="code"><pre><span class="line">      ~<span class="function"><span class="title">Boook</span></span>()&#123;&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  private:</span></pre></td></tr><tr><td class="code"><pre><span class="line">       char* name;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><br>3、拷贝构造函数：当我们实现了自己的析构函数时，我们必须要实现拷贝构造函数，注意拷贝构造不是简单的将类对象指针拷贝过来，而是将整个类对象的内容拷贝过来(这一点非常关键)<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">class Book &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">public:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="title">Book</span></span>()&#123;&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ~<span class="function"><span class="title">Boook</span></span>()&#123;&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Book(const Book&amp; book);</span></pre></td></tr><tr><td class="code"><pre><span class="line">public:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    string name;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    int index;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">Book::Book(const Book&amp; book)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    name = book.name;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    index = book.index;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr></table></figure><br>4、赋值操作符：根据三法则，当我们实现了自己的析构函数时，我们需要实现自己的赋值操作符，在赋值的时候，不是讲指针赋值过来，而是将指针对应指向的字符串赋值过来，这是最关键的一步。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">class Book &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  public:</span></pre></td></tr><tr><td class="code"><pre><span class="line">     <span class="function"><span class="title">Book</span></span>()&#123;&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     ~<span class="function"><span class="title">Boook</span></span>()&#123;&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     Book(const Book&amp; book);</span></pre></td></tr><tr><td class="code"><pre><span class="line">     Book&amp; operator = (const Book&amp; hrs);</span></pre></td></tr><tr><td class="code"><pre><span class="line">public:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    string name;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    int index;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">Book&amp; Book::operator = (const Book&amp; hrs)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    name = hrs.name;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    index = hrs.index;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">return</span> *this;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><br>备注：C++三法则：如果需要析构函数，则一定需要拷贝构造函数和赋值操作符<br>如何理解这句话，首先，从“如果需要析构函数”这里我们知道，类中必然出现了指针类型的成员（否则不需要我们写析构函数，默认的析构函数就可以用了），所以，我们需要自己写析构函数来释放给指针所分配的内存来防止内存泄露，那么为什么说“一定需要拷贝构造函数和赋值操作符”呢，原因还是这样：类中出现了指针类型的成员。有指针类型的成员，我们必须防止浅拷贝问题，所以，一定需要拷贝构造函数和赋值操作符，这两个函数是防止浅拷贝问题所必须的。</p>
]]></content>
      <categories>
        <category>C++基础知识</category>
      </categories>
      <tags>
        <tag>C++基础知识总结</tag>
      </tags>
  </entry>
  <entry>
    <title>delete/default的使用</title>
    <url>/2019/12/29/cpp%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/delete-default/</url>
    <content><![CDATA[<p>1、default关键字：只能用于类的特殊成员函数中，关键字既可以在类内也可以在类外<br>在文章，cpp类的4种默认函数中，我们说明了如果我们自己定义了析构函数，根据三法则，我们需要自己实现拷贝构造函数和赋值操作符重载函数。那么对于一个变量比较多的类我们自己实现一方面容易出错，另一方面执行效率也不高，这时候怎么办呢，我们可以使用default关键字。<br><a id="more"></a><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">class Book &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  public:</span></pre></td></tr><tr><td class="code"><pre><span class="line">     Book() = default; // 该函数比用户自己定义的默认构造函数获得更高的代码效率，<span class="string">"=default"</span>函数特性仅适用于类的特殊成员函数，且该特殊成员函数没有默认参数。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     Book(string name)&#123;&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     // Book(string name) = default; // 错误，并非类的特殊成员函数</span></pre></td></tr><tr><td class="code"><pre><span class="line">     // Book(string name = <span class="string">"C++"</span>) // 错误，构造函数带有默认参数</span></pre></td></tr><tr><td class="code"><pre><span class="line">     // fun1(); // 错误，default只能用于特殊成员函数</span></pre></td></tr><tr><td class="code"><pre><span class="line">     ~<span class="function"><span class="title">Boook</span></span>()&#123;&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     Book(const Book&amp; book) = default;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     Book&amp; operator = (const Book&amp; hrs) = default;</span></pre></td></tr><tr><td class="code"><pre><span class="line">public:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    string name;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    int index;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">int main()</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Book book1(<span class="string">"linux"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Book book2; // 调用了不带参数的构造函数，所以类中必须声明定义一个，否则会报错。</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">return</span> 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><br>2、delete关键字：为了能够让程序员显式的禁用某个函数，C++11 标准引入了一个新特性：”=delete”函数。程序员只需在函数声明后上“=delete;”，就可将该函数禁用。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">class Book &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  public:</span></pre></td></tr><tr><td class="code"><pre><span class="line">     Book();</span></pre></td></tr><tr><td class="code"><pre><span class="line">     Book(const Book&amp; book) = delete;  // 声明拷贝构造函数为 deleted 函数</span></pre></td></tr><tr><td class="code"><pre><span class="line">     Book&amp; operator = (const Book&amp; hrs) = delete;  // 声明拷贝赋值操作符为 deleted 函数</span></pre></td></tr><tr><td class="code"><pre><span class="line">public:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    string name;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    int index;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">int main()</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Book book2; // 类不必要创建析构函数，相应的拷贝构造和赋值操作符可以禁止</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">return</span> 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>C++基础知识</category>
      </categories>
      <tags>
        <tag>C++基础知识总结</tag>
      </tags>
  </entry>
</search>
